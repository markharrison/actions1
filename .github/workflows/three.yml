# This is a basic workflow to help you get started with Actions

name: Three

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  job1:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      output1: ${{ steps.step1.outputs.test }}
      output2: ${{ steps.step2.outputs.test }}
      output3: ${{ steps.step2.outputs.testx }}
    steps:
      - id: step1
        run: echo "test=hello" >> "$GITHUB_OUTPUT"  
      - id: step2
        run: echo "testx=world" >> "$GITHUB_OUTPUT"
      - id: step3
        run: |
          echo "::debug::Set the Octocat variable" 
          echo "::error file=app.js,line=1,col=5,endColumn=7::Missing semicolon"
          echo "::notice file=README.md,line=11,col=15,endColumn=7::Missing hash"
  job2:
    runs-on: ubuntu-latest
    needs: job1
    steps:
      - env:
          OUTPUT1: ${{needs.job1.outputs.output1}}
          OUTPUT2: ${{needs.job1.outputs.output2}}
          OUTPUT3: ${{needs.job1.outputs.output3}}
        run: echo "$OUTPUT1 $OUTPUT2 $OUTPUT3"

  job3:
      runs-on: ubuntu-latest
      steps:
      - id: sets-a-secret
        name: Generate, mask, and output a secret
        run: |
          the_secret=$((RANDOM))
          echo "::add-mask::$the_secret"
          echo "secret-number=$the_secret" >> "$GITHUB_OUTPUT"
      - name: Use that secret output (protected by a mask)
        run: |
          echo "the secret number is ${{ steps.sets-a-secret.outputs.secret-number }}"
